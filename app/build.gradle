buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}

plugins {
    id "java"
    id "idea"
    id "eclipse"
    id "application"
    // !!! 3.4.0 -> Unsupported class file major version 63, Failed to process the entry META-INF/.../jackson-core-2.15.2.jar
    id "com.google.cloud.tools.jib" version "3.3.1"
    id "com.github.davidmc24.gradle.plugin.avro" version "1.9.1"
}

java {
    sourceCompatibility = "17"
    targetCompatibility = "17"
    version = "0.0.1"
}

repositories {
    mavenCentral()

    maven {
        url "https://packages.confluent.io/maven"
    }
}

test {
    useJUnitPlatform()
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "java"

ext {
    javaMainClass = "org.sxram.kafka.tutorial.App"
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'org.slf4j:slf4j-api:2.0.11'
    implementation 'ch.qos.logback:logback-classic:1.4.14'
    implementation 'ch.qos.logback:logback-core:1.4.14'

    implementation 'com.github.javafaker:javafaker:1.0.2'

    implementation "org.apache.avro:avro:1.11.3"
    implementation 'org.apache.kafka:kafka-streams:3.6.0'
    implementation ('org.apache.kafka:kafka-clients') {
        version {
            strictly '3.5.1'
        }
    }
    implementation 'io.confluent:kafka-streams-avro-serde:7.3.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testImplementation 'org.testcontainers:kafka:1.19.3'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    testImplementation 'org.apache.kafka:kafka-streams-test-utils:3.4.0'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'net.mguenther.kafka:kafka-junit:3.5.1'
}

jar {
    manifest {
        attributes(
                "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(" "),
                "Main-Class": javaMainClass
        )
    }
}

shadowJar {
    archiveBaseName.set('kafka-java-getting-started')
    archiveClassifier.set('all')
}

application {
    getMainClass().set(javaMainClass)
}

test {
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}